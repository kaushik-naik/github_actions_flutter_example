name: "Build"

on:
  pull_request:
    branches:
      - dev
      - master  # Changed from 'main' to 'master' to match your requirement
  push:
    branches:
      - dev
      - master  # Changed from 'main' to 'master' to match your requirement
  workflow_dispatch:
    inputs:
      flavor:
        description: 'Select build flavor'
        required: true
        default: 'qa'
        type: choice
        options:
          - qa
          - stage
          - prod

jobs:
  # Job 1: Build (no approval needed)
  build:
    name: Build APK
    runs-on: ubuntu-latest
    outputs:
      build-success: ${{ steps.build-status.outputs.success }}
      flavor: ${{ steps.set-flavor.outputs.flavor }}

    steps:
      #1 Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      #2 Set Flavor Based on Branch or Manual Input
      - name: Set Build Flavor
        id: set-flavor
        run: |
          # For workflow_dispatch (manual trigger), use the selected flavor
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            FLAVOR="${{ github.event.inputs.flavor }}"
            echo "Manual trigger - using selected flavor: $FLAVOR"
          
          # For pull_request, determine flavor based on base branch
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
            echo "Pull request detected with base branch: $BASE_BRANCH"
          
            case $BASE_BRANCH in
              dev)
                FLAVOR="qa"
                echo "Base branch is 'dev' - setting flavor to QA"
                ;;
              master)
                FLAVOR="stage"
                echo "Base branch is 'master' - setting flavor to STAGE"
                ;;
              *)
                FLAVOR="qa"
                echo "Unknown base branch '$BASE_BRANCH' - defaulting to QA"
                ;;
            esac
          
          # For push events, determine flavor based on target branch
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            TARGET_BRANCH="${{ github.ref_name }}"
            echo "Push event detected to branch: $TARGET_BRANCH"
          
            case $TARGET_BRANCH in
              dev)
                FLAVOR="qa"
                echo "Push to 'dev' branch - setting flavor to QA"
                ;;
              master)
                FLAVOR="stage"
                echo "Push to 'master' branch - setting flavor to STAGE"
                ;;
              *)
                FLAVOR="qa"
                echo "Push to unknown branch '$TARGET_BRANCH' - defaulting to QA"
                ;;
            esac
          
          # Fallback
          else
            FLAVOR="qa"
            echo "Unknown event type - defaulting to QA"
          fi
          
          echo "flavor=$FLAVOR" >> $GITHUB_OUTPUT
          echo "🎯 Final flavor selected: $FLAVOR"

      #3 Setup Flutter
      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.8'
          channel: 'stable'

      #4 Install Dependencies
      - name: Install Dependencies
        run: flutter pub get

      # 5 Run tests
      - name: Run Tests
        run: flutter test

      #5 Building APK
      - name: Build APK
        run: |
          FLAVOR="${{ steps.set-flavor.outputs.flavor }}"
          echo "🏗️ Building APK for flavor: $FLAVOR"
          
          case $FLAVOR in
          qa)
            echo "Building QA APK..."
            # Add any QA-specific build commands here if needed
            ;;
          stage)
            echo "Building STAGE APK..."
            # Add any STAGE-specific build commands here if needed
            ;;
          prod)
            echo "Building PROD APK..."
            # Add any PROD-specific build commands here if needed
            ;;
          *)
            echo "Building default APK..."
            ;;
          esac
          
          flutter build apk --release

      #6 Upload Build Artifacts Temporarily (for use in later job)
      - name: Upload Build Artifacts Temporarily
        uses: actions/upload-artifact@v4
        with:
          name: temp-apk-${{ github.run_id }}
          path: |
            build/app/outputs/flutter-apk/app-release.apk
          retention-days: 1  # Only keep for 1 day since it's temporary

      #7 Set Build Status
      - name: Set Build Status
        id: build-status
        run: |
          echo "success=true" >> $GITHUB_OUTPUT
          echo "✅ Build completed successfully!"

  # Job 2: Upload Artifact (automatically after successful build) - NO REBUILD!
  upload-artifact:
    name: Upload Build Artifact
    runs-on: ubuntu-latest
    needs: build
    if: ${{ needs.build.outputs.build-success == 'true' }}

    steps:
      #1 Download Previously Built APK
      - name: Download Previously Built APK
        uses: actions/download-artifact@v4
        with:
          name: temp-apk-${{ github.run_id }}
          path: ./downloaded-apk

      #2 Verify APK exists
      - name: Verify APK exists
        run: |
          echo "Checking for APK file..."
          ls -la ./downloaded-apk/
          if [ -f "./downloaded-apk/app-release.apk" ]; then
            echo "✅ APK found and ready for upload!"
          else
            echo "❌ APK not found!"
            exit 1
          fi

      #3 Upload Final Artifacts
      - name: Upload Final Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Releases-${{ needs.build.outputs.flavor }}
          path: |
            ./downloaded-apk/app-release.apk

      #4 Clean up temporary artifact
      - name: Clean up temporary artifact
        uses: actions/github-script@v7
        with:
          script: |
            try {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: context.payload.workflow_run?.artifacts?.find(a => a.name === `temp-apk-${{ github.run_id }}`)?.id
              });
              console.log('✅ Temporary artifact cleaned up');
            } catch (error) {
              console.log('⚠️ Could not clean up temporary artifact:', error.message);
              // Don't fail the workflow if cleanup fails
            }

      - name: Upload Success
        run: |
          echo "✅ Artifact uploaded successfully for ${{ needs.build.outputs.flavor }} build!"
          echo "📦 No rebuild was required - used previously built APK!"
          echo "🚀 APK published automatically after successful build!"

  # Job 3: Workflow Status Summary
  workflow-summary:
    name: Workflow Summary
    runs-on: ubuntu-latest
    needs: [build, upload-artifact]
    if: always()

    steps:
      - name: Workflow Status Summary
        run: |
          echo "## Workflow Summary"
          echo "Build Status: ${{ needs.build.result }}"
          echo "Upload Status: ${{ needs.upload-artifact.result }}"
          
          if [[ "${{ needs.build.result }}" == "success" ]]; then
            echo "✅ Build completed successfully"
          else
            echo "❌ Build failed"
          fi
          
          if [[ "${{ needs.upload-artifact.result }}" == "success" ]]; then
            echo "✅ Artifact uploaded successfully (no rebuild required!)"
            echo "🚀 APK automatically published after successful build!"
          elif [[ "${{ needs.upload-artifact.result }}" == "skipped" ]]; then
            echo "⏭️ Artifact upload skipped (build may have failed)"
          else
            echo "❌ Artifact upload failed"
          fi
          
          # Overall workflow success determination
          if [[ "${{ needs.build.result }}" == "success" && "${{ needs.upload-artifact.result }}" == "success" ]]; then
            echo "🎉 Overall Workflow: SUCCESS (Build and Upload completed)"
            exit 0
          elif [[ "${{ needs.build.result }}" == "success" ]]; then
            echo "⚠️ Overall Workflow: PARTIAL SUCCESS (Build completed, Upload failed)"
            exit 1
          else
            echo "💥 Overall Workflow: FAILED (Build failed)"
            exit 1
          fi